import { CoreLabeledDOMWidgetModel } from './widget_core';
import { LabeledDOMWidgetView } from './widget';
export declare class SelectionModel extends CoreLabeledDOMWidgetModel {
    defaults(): any;
}
export declare class SelectModel extends SelectionModel {
    defaults(): any;
}
export declare class SelectView extends LabeledDOMWidgetView {
    /**
     * Public constructor.
     */
    initialize(parameters: any): void;
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Update the contents of this view
     */
    update(): void;
    _updateOptions(): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Handle when a new value is selected.
     */
    _handle_change(): void;
    listbox: HTMLSelectElement;
}
export declare class DropdownModel extends SelectionModel {
    defaults(): any;
}
export declare class DropdownView extends SelectView {
}
export declare class RadioButtonsModel extends SelectionModel {
    defaults(): any;
}
export declare class RadioButtonsView extends LabeledDOMWidgetView {
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Update the contents of this view
     *
     * Called when the model is changed.  The model may have been
     * changed by another view or by a state update from the back-end.
     */
    update(options?: any): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Handle when a value is clicked.
     *
     * Calling model.set will trigger all of the other views of the
     * model to update.
     */
    _handle_click(event: any): void;
    container: HTMLDivElement;
}
export declare class ToggleButtonsModel extends SelectionModel {
    defaults(): any;
}
export declare class ToggleButtonsView extends LabeledDOMWidgetView {
    initialize(options: any): void;
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Update the contents of this view
     *
     * Called when the model is changed.  The model may have been
     * changed by another view or by a state update from the back-end.
     */
    update(options?: any): void;
    update_style_traits(button?: any): void;
    update_button_style(): void;
    set_button_style(): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Handle when a value is clicked.
     *
     * Calling model.set will trigger all of the other views of the
     * model to update.
     */
    _handle_click(event: any): void;
    private _css_state;
    buttongroup: HTMLDivElement;
}
export declare namespace ToggleButtonsView {
    const classMap: {
        primary: string[];
        success: string[];
        info: string[];
        warning: string[];
        danger: string[];
    };
}
export declare class SelectionSliderModel extends SelectionModel {
    defaults(): any;
}
export declare class SelectionSliderView extends LabeledDOMWidgetView {
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Update the contents of this view
     *
     * Called when the model is changed.  The model may have been
     * changed by another view or by a state update from the back-end.
     */
    update(options?: any): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Called when the slider value is changing.
     */
    handleSliderChange(e: any, ui: any): void;
    /**
     * Called when the slider value has changed.
     *
     * Calling model.set will trigger all of the other views of the
     * model to update.
     */
    handleSliderChanged(e: any, ui: any): void;
    _validate_slide_value(x: any): number;
    $slider: any;
    slider_container: HTMLDivElement;
    readout: HTMLDivElement;
}
export declare class MultipleSelectionModel extends SelectionModel {
    defaults(): any;
}
export declare class SelectMultipleModel extends MultipleSelectionModel {
    defaults(): any;
}
export declare class SelectMultipleView extends LabeledDOMWidgetView {
    /**
     * Public constructor.
     */
    initialize(parameters: any): void;
    /**
     * Called when view is rendered.
     */
    render(): void;
    /**
     * Update the contents of this view
     */
    update(): void;
    _updateOptions(): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Handle when a new value is selected.
     */
    _handle_change(): void;
    listbox: HTMLSelectElement;
}

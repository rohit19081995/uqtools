import { CoreLabeledDOMWidgetModel } from './widget_core';
import { DOMWidgetView, LabeledDOMWidgetView } from './widget';
import { StyleModel } from './widget_style';
import 'jquery-ui/ui/widgets/slider';
export declare class IntModel extends CoreLabeledDOMWidgetModel {
    defaults(): any;
}
export declare class BoundedIntModel extends IntModel {
    defaults(): any;
}
export declare class SliderStyleModel extends StyleModel {
    defaults(): any;
    static styleProperties: {
        handle_color: {
            selector: string;
            attribute: string;
            default: any;
        };
    };
}
export declare class IntSliderModel extends BoundedIntModel {
    defaults(): any;
    initialize(attributes: any, options: any): void;
    update_readout_format(): void;
    readout_formatter: any;
}
export declare class IntSliderView extends LabeledDOMWidgetView {
    render(): void;
    update(options?: any): void;
    /**
     * Returns true if the readout box content overflows.
     */
    readout_overflow(): boolean;
    /**
     * Write value to a string
     * @param  {number|number[]} value
     * @return {string}
     */
    valueToString(value: any): any;
    /**
     * Parse value from a string
     * @param  {string} text
     * @return {number|number[]} value
     */
    stringToValue(text: any): number | number[];
    events(): {
        [e: string]: string;
    };
    handleKeyDown(e: any): void;
    handleTextChange(): void;
    /**
     * Called when the slider value is changing.
     */
    handleSliderChange(e: any, ui: any): void;
    /**
     * Called when the slider value has changed.
     *
     * Calling model.set will trigger all of the other views of the
     * model to update.
     */
    handleSliderChanged(e: any, ui: any): void;
    _validate_slide_value(x: any): number;
    $slider: any;
    slider_container: HTMLElement;
    readout: HTMLDivElement;
    model: IntSliderModel;
    _parse_value: typeof parseInt;
    _range_regex: RegExp;
}
export declare class IntTextModel extends IntModel {
    defaults(): any;
}
export declare class IntTextView extends LabeledDOMWidgetView {
    render(): void;
    update(options?: any): void;
    events(): {
        [e: string]: string;
    };
    /**
     * Handle key down
     *
     * Stop propagation so the event isn't sent to the application.
     */
    handleKeyDown(e: any): void;
    /**
     * Handles key press
     *
     * Stop propagation so the event isn't sent to the application.
     */
    handleKeypress(e: any): void;
    handleChanging(e: any): void;
    handleChanged(e: any): void;
    _parse_value: typeof parseInt;
    textbox: HTMLInputElement;
}
export declare class ProgressStyleModel extends StyleModel {
    defaults(): any;
    static styleProperties: {
        bar_color: {
            selector: string;
            attribute: string;
            default: any;
        };
    };
}
export declare class ProgressModel extends BoundedIntModel {
    defaults(): any;
}
export declare class ProgressView extends LabeledDOMWidgetView {
    initialize(parameters: any): void;
    render(): void;
    update(): void;
    update_bar_style(): void;
    set_bar_style(): void;
    progress: HTMLDivElement;
    bar: HTMLDivElement;
    static class_map: {
        success: string[];
        info: string[];
        warning: string[];
        danger: string[];
    };
}
export declare class PlayModel extends BoundedIntModel {
    defaults(): any;
    initialize(attributes: any, options: any): void;
    loop(): void;
    stop(): void;
    pause(): void;
    play(): void;
}
export declare class PlayView extends DOMWidgetView {
    render(): void;
    update_playing(): void;
    playButton: HTMLButtonElement;
    pauseButton: HTMLButtonElement;
    stopButton: HTMLButtonElement;
    model: PlayModel;
}
